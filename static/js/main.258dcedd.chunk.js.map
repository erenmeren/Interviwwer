{"version":3,"sources":["components/Navbar/NaviBar.tsx","redux/auth/actions.ts","redux/auth/types.ts","components/Navbar/index.ts","pages/Home/index.ts","pages/Home/Home.tsx","pages/Login/Login.tsx","pages/Login/index.ts","pages/Lorem/index.ts","pages/Lorem/Lorem.tsx","pages/Interviewer/Interviewer.tsx","redux/user/actions.ts","redux/user/types.ts","pages/Interviewer/index.ts","App.tsx","redux/store/index.ts","redux/auth/reducers.ts","redux/user/reducers.ts","serviceWorker.ts","index.tsx"],"names":["mapDispatchToProps","logOutDisconnect","dispatch","a","window","localStorage","setItem","type","NaviBar","connect","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","to","Form","inline","Button","variant","onClick","Home","Container","logInConnect","Login","style","marginTop","Row","Col","display","justifyContent","Lorem","updeteUserPointFunc","userId","point","Interviewer","state","users","useState","selectedUserId","setSelectedUserId","selectedTaskIds","setSelectedTaskIds","showCheckListModal","setShowCheckListModal","handleCloseCheckListModal","calculatePointByTaskId","taskIds","InterviewTasks","reduce","prev","cur","includes","taskHandleChange","event","taskId","parseInt","target","value","checked","addTaskIdFromSelectedTaskIds","removeTaskIdFromSelectedTaskIds","filter","Table","striped","bordered","hover","map","user","key","name","lastname","Modal","size","show","onHide","backdrop","keyboard","Header","closeButton","Title","Body","task","Check","onChange","text","Footer","points","checkAuthenticationConnect","getItem","auth","formattedAuth","JSON","parse","isAuthenticated","userAuthData","React","useEffect","exact","path","component","composeEnhancers","reduces","combineReducers","userName","uuid","action","Users","compose","store","createStore","undefined","applyMiddleware","thunkMiddleware","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4iGAuCMA,EAAqB,CACzBC,iBCRK,WACL,8CAAO,WAAOC,GAAP,SAAAC,EAAA,sEACCC,OAAOC,aAAaC,QAAQ,gBAAiB,SAD9C,OAELJ,EAjBK,CACLK,KChB0B,mBD8BrB,2CAAP,wDEhCaC,EH0CAC,YAAQ,KAAMT,EAAdS,EAjCC,SAAC,GAAkC,IAAhCR,EAA+B,EAA/BA,iBACjB,OACE,kBAACS,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KACjB,sDAEF,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,kBAACH,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,gBAAT,gBAEF,kBAACH,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,WAGJ,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS1B,GAA3C,kB,QI7BK2B,ECEF,WACX,OACE,kBAACC,EAAA,EAAD,KACE,oCACA,iGACsE,IACpE,4CAFF,c,gBCyBA7B,G,MAAqB,CACzB8B,aLRK,WACL,8CAAO,WAAO5B,GAAP,SAAAC,EAAA,sEACCC,OAAOC,aAAaC,QAAQ,gBAAiB,QAD9C,OAELJ,EAhBK,CACLK,KCbwB,iBD0BnB,2CAAP,yDMzBawB,EDmCAtB,YAAQ,KAAMT,EAAdS,EAzBD,SAAC,GAA8B,IAA5BqB,EAA2B,EAA3BA,aAKf,OACE,kBAACD,EAAA,EAAD,CACET,UAAU,4BACVY,MAAO,CAAEC,UAAW,QAEpB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,MAAO,CAAEI,QAAS,OAAQC,eAAgB,WAC7C,kBAACZ,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAXpB,WACZG,MAUM,iBEtBKQ,ECED,WACZ,OACE,kBAACT,EAAA,EAAD,KACE,qCACA,sfAUA,6dAUA,qjBAWA,ilBAWA,2fAUA,moBAYA,4sB,wCCgGA7B,EAAqB,CACzBuC,oBChK6B,SAACC,EAAgBC,GAAjB,MAAoC,CACjElC,KCT+B,oBDU/BiC,SACAC,WEVaC,EH0KAjC,aARS,SAACkC,GAAD,MAAoB,CAC1CC,MAAOD,EAAMC,SAOyB5C,EAAzBS,EAvJK,SAAC,GAA4C,IAA1C8B,EAAyC,EAAzCA,oBAAqBK,EAAoB,EAApBA,MAAoB,EAClBC,mBAAiB,GADC,mBACvDC,EADuD,KACvCC,EADuC,OAEhBF,mBAAwB,IAFR,mBAEvDG,EAFuD,KAEtCC,EAFsC,OAGVJ,oBAAkB,GAHR,mBAGvDK,EAHuD,KAGnCC,EAHmC,KAMxDC,EAA4B,WAChCD,GAAsB,GAGtBF,EAAmB,KAmBfI,EAAyB,SAACC,GAC9B,OAAOC,EAAeC,QAAO,SAAUC,EAAMC,GAC3C,OAAOJ,EAAQK,SAASD,EAAIxC,IAAMuC,EAAOC,EAAIjB,MAAQgB,IACpD,IAICG,EAAmB,SAACC,GACxB,IAAMC,EAASC,SAAUF,EAAMG,OAAOC,QAEb,IAAzBJ,EAAMG,OAAOE,QACTC,EAA6BL,GAC7BM,EAAgCN,IAIhCK,EAA+B,SAACL,GACpCb,EAAmB,GAAD,mBAAKD,GAAL,CAAsBc,MAIpCM,EAAkC,SAACN,GACvCb,EAAmBD,EAAgBqB,QAAO,SAACnD,GAAD,OAAQA,IAAO4C,OAG3D,OACE,oCACE,kBAACjC,EAAA,EAAD,CACET,UAAU,4BACVY,MAAO,CAAEC,UAAW,OAEpB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,MAAO,CAAEI,QAAS,OAAQC,eAAgB,WAC7C,kBAACiC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,iCACA,0CACA,yCACA,qCACA,+BAGJ,+BACG7B,EAAM8B,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKzD,IACZ,4BAAKyD,EAAKzD,IACV,4BAAKyD,EAAKE,MACV,4BAAKF,EAAKG,UACV,4BAAKH,EAAKlC,OACV,4BACE,kBAAChB,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,kBApEGa,EAoE4BmC,EAAKzD,GAnEjE6B,EAAkBP,QAClBW,GAAsB,GAFS,IAACX,IAkEd,aAKU,cAS1B,kBAACuC,EAAA,EAAD,CACEC,KAAK,KACLC,KAAM/B,EACNgC,OAAQ9B,EACR+B,SAAS,SACTC,UAAU,GAEV,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,6CAEF,kBAACR,EAAA,EAAMS,KAAP,KACE,kBAAClB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,6BACA,oCACA,uCAGJ,+BACGlB,EAAemB,KAAI,SAACe,GAAD,OAClB,4BACE,4BACE,kBAAClE,EAAA,EAAKmE,MAAN,CACEnF,KAAK,WACL0D,MAAOwB,EAAKvE,GACZyE,SAAU/B,KAGd,4BAAK6B,EAAKG,MACV,4BAAKH,EAAKhD,cAMpB,kBAACsC,EAAA,EAAMc,OAAP,KACE,kBAACpE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASyB,GAArC,SAGA,kBAAC3B,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAlHJ,WAC5B,IAAMmE,EAASzC,EAAuBL,GAGtCT,EAAoBO,EAAgBgD,GACpC1C,MA6GM,cI1GV,IAIMpD,EAAqB,CACzB+F,2BbdK,WACL,8CAAO,WAAO7F,GAAP,iBAAAC,EAAA,sEACcC,OAAOC,aAAa2F,QAAQ,iBAD1C,OACCC,EADD,OAECC,EAAgC,kBAATD,EAAoBE,KAAKC,MAAMH,GAAQ,KAEpD/F,EAAhBgG,EAhCK,CACL3F,KCbwB,gBDkBnB,CACLA,KChB0B,mBDqCrB,2CAAP,wDagBaE,eARS,SAACkC,GAAD,MAAoB,CAC1C0D,gBAAiB1D,EAAM2D,aAAaD,mBAOErG,EAAzBS,EAnCf,YAAuE,IAAxDsF,EAAuD,EAAvDA,2BAA4BM,EAA2B,EAA3BA,gBAKzC,OAJAE,IAAMC,WAAU,WACdT,OAIA,kBAAC,IAAD,KACGM,GAAmB,kBAAC,EAAD,MACpB,kBAAC,IAAD,KACIA,EAMA,oCACE,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAY/E,IAClC,kBAAC,IAAD,CAAO8E,KAAK,eAAeC,UAAYjE,IACvC,kBAAC,IAAD,CAAOgE,KAAK,SAASC,UAAYrE,IACjC,kBAAC,IAAD,CAAUhB,GAAG,OATf,oCACE,kBAAC,IAAD,CAAOoF,KAAK,SAASC,UAAY5E,IACjC,kBAAC,IAAD,CAAUT,GAAG,iB,oCC3BzB,IAKIsF,EALEC,EAAUC,YAAgB,CAC9BR,aCHK,WAGW,IAFhB3D,EAEe,uDAFQ,CAAEoE,SAAU,KAAMC,KAAM,KAAMX,iBAAiB,GACtEY,EACe,uCACf,OAAQA,EAAO1G,MACb,IdTwB,ecUtB,OAAO,2BACFoC,GADL,IAEEoE,SAAU,QACVC,KAAM,mBACNX,iBAAiB,IAErB,Idb0B,iBccxB,MAAO,CAAEU,SAAU,KAAMC,KAAM,KAAMX,iBAAiB,GAE1D,OAAO1D,GDXPC,MEHK,WAGU,IAFfD,EAEc,uDAFQuE,EACtBD,EACc,uCACd,OAAQA,EAAO1G,MACb,ILV6B,oBKW3B,OAAOoC,EAAM+B,KAAI,SAACC,GAAD,OACfA,EAAKzD,KAAO+F,EAAOzE,OAAnB,2BAAiCmC,GAAjC,IAAuClC,MAAOwE,EAAOxE,QAAUkC,KAGnE,QACE,OAAOhC,MFGXiE,EAAmBO,IAGd,IAAMC,EAAQC,YACnBR,OACAS,EACAV,EAAiBW,YAAgBC,OGbfC,QACW,cAA7BrH,OAAOsH,SAASC,UAEe,UAA7BvH,OAAOsH,SAASC,UAEhBvH,OAAOsH,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAAC,EAAD,QAGJY,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.258dcedd.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Form, Button, Nav } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logOut } from '../../redux/auth/actions';\n\ninterface IProps {\n  logOutDisconnect: () => void;\n}\n\nconst NaviBar = ({ logOutDisconnect }: IProps) => {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#\">\n        <b>Innovance Interviewers</b>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link>\n            <Link to=\"/\">Home</Link>\n          </Nav.Link>\n          <Nav.Link>\n            <Link to=\"/interviwers\">Interviwers</Link>\n          </Nav.Link>\n          <Nav.Link>\n            <Link to=\"/lorem\">Lorem</Link>\n          </Nav.Link>\n        </Nav>\n        <Form inline>\n          <Button variant=\"outline-success\" onClick={logOutDisconnect}>\n            Sign out\n          </Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nconst mapDispatchToProps = {\n  logOutDisconnect: logOut,\n};\n\nexport default connect(null, mapDispatchToProps)(NaviBar);\n","import { ThunkDispatch as Dispatch } from 'redux-thunk';\nimport * as constants from './types';\n\nexport interface IAuthenticate {\n  type: constants.AUTHENTICATE;\n}\n\nexport interface IUnauthenticate {\n  type: constants.UNAUTHENTICATE;\n}\n\nfunction authenticate(): IAuthenticate {\n  return {\n    type: constants.AUTHENTICATE,\n  };\n}\n\nfunction unauthenticate(): IUnauthenticate {\n  return {\n    type: constants.UNAUTHENTICATE,\n  };\n}\n\nexport type AuthenticationAction = IAuthenticate | IUnauthenticate;\n\nexport function logIn() {\n  return async (dispatch: Dispatch<AuthenticationAction, {}, any>) => {\n    await window.localStorage.setItem('authenticated', 'true');\n    dispatch(authenticate());\n  };\n}\n\nexport function logOut() {\n  return async (dispatch: Dispatch<AuthenticationAction, {}, any>) => {\n    await window.localStorage.setItem('authenticated', 'false');\n    dispatch(unauthenticate());\n  };\n}\n\nexport function checkAuthentication() {\n  return async (dispatch: Dispatch<AuthenticationAction, {}, any>) => {\n    const auth = await window.localStorage.getItem('authenticated');\n    const formattedAuth = typeof auth === 'string' ? JSON.parse(auth) : null;\n\n    formattedAuth ? dispatch(authenticate()) : dispatch(unauthenticate());\n  };\n}\n","export const AUTHENTICATE = 'AUTHENTICATE';\nexport type AUTHENTICATE = typeof AUTHENTICATE;\n\nexport const UNAUTHENTICATE = 'UNAUTHENTICATE';\nexport type UNAUTHENTICATE = typeof UNAUTHENTICATE;\n","import NaviBar from './NaviBar';\nexport default NaviBar;\n","import Home from './Home';\nexport default Home;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nconst Home = () => {\n  return (\n    <Container>\n      <h1>Home</h1>\n      <p>\n        You can calculate interviwers points by complated tasks. Just go to{' '}\n        <b>\"Interviwers\"</b> page :)\n      </p>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Button, Container, Col, Row } from 'react-bootstrap';\nimport { logIn } from '../../redux/auth/actions';\nimport './index.css';\n\ninterface IProps {\n  logInConnect: () => void;\n}\n\nconst Login = ({ logInConnect }: IProps) => {\n  const login = () => {\n    logInConnect();\n  };\n\n  return (\n    <Container\n      className=\"justify-content-md-center\"\n      style={{ marginTop: '10%' }}\n    >\n      <Row>\n        <Col style={{ display: 'flex', justifyContent: 'center' }}>\n          <Button variant=\"primary\" onClick={login}>\n            Sign In\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nconst mapDispatchToProps = {\n  logInConnect: logIn,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import Login from './Login';\nexport default Login;\n","import Lorem from './Lorem';\nexport default Lorem;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nconst Lorem = () => {\n  return (\n    <Container>\n      <h1>Lorem</h1>\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec quis\n        justo porta, placerat magna nec, varius mi. Interdum et malesuada fames\n        ac ante ipsum primis in faucibus. Donec dapibus ligula erat, vel\n        vehicula enim eleifend in. Praesent imperdiet diam vel lacus aliquam\n        fermentum. Pellentesque volutpat tellus massa, quis interdum nunc\n        pharetra laoreet. Suspendisse viverra dui at ipsum maximus pharetra.\n        Morbi fermentum erat libero. In hac habitasse platea dictumst.\n      </p>\n\n      <p>\n        Donec ornare vulputate ex eget venenatis. Donec at odio a risus tempus\n        sodales. Fusce eget erat libero. Sed lacinia ipsum erat, a iaculis\n        mauris convallis volutpat. Curabitur venenatis nunc at leo lacinia, a\n        viverra nunc rhoncus. Donec porta volutpat laoreet. Aliquam bibendum\n        malesuada quam, pulvinar tincidunt tortor aliquet vitae. Nam molestie\n        diam purus, vel aliquam turpis sodales et. Aenean lobortis bibendum\n        dictum. Nulla ut ornare turpis.\n      </p>\n\n      <p>\n        Mauris ultrices ante sit amet libero hendrerit porttitor. Duis ultrices\n        mauris sed purus condimentum, ac ultricies leo ultricies. Pellentesque\n        vel molestie enim, sed porta nisl. Pellentesque dapibus id lacus eget\n        sollicitudin. Duis at neque iaculis, egestas lacus nec, tempor sapien.\n        Aliquam rutrum magna at lectus placerat venenatis. Donec luctus justo\n        est, a porta sapien condimentum vel. Aliquam eu nulla eu magna gravida\n        aliquam ut vitae turpis. Morbi id accumsan risus, ac consectetur mi.\n        Nunc pretium volutpat neque nec rhoncus.\n      </p>\n\n      <p>\n        Quisque condimentum non dui sit amet ultricies. Proin ante orci, semper\n        ac convallis sed, facilisis sed massa. Vestibulum ante ipsum primis in\n        faucibus orci luctus et ultrices posuere cubilia curae; Integer interdum\n        nulla in tempor pharetra. Integer est sapien, pulvinar vel rutrum ac,\n        fringilla quis ex. Pellentesque habitant morbi tristique senectus et\n        netus et malesuada fames ac turpis egestas. Donec feugiat diam tempor,\n        mattis dui congue, ultricies neque. Vestibulum consequat ac risus eget\n        rhoncus. Nullam sed est id libero dignissim consequat at nec sem.\n      </p>\n\n      <p>\n        Proin fringilla ipsum accumsan, euismod tortor ut, commodo tellus. Duis\n        convallis sagittis purus, quis ullamcorper ipsum venenatis sed. Praesent\n        accumsan, nibh non vulputate eleifend, augue odio auctor ex, vel dapibus\n        ex nisi nec metus. Morbi non maximus sem. Duis erat nisl, venenatis et\n        elit sed, semper accumsan lectus. Nulla vel mauris non erat auctor\n        gravida nec in lectus. Nunc vel quam egestas, gravida lacus a, egestas\n        eros. Mauris vehicula sodales dolor eget pretium.\n      </p>\n\n      <p>\n        Aliquam maximus in justo at imperdiet. Maecenas velit lacus, pharetra\n        eget pulvinar a, fringilla non ipsum. Nullam in leo vitae leo vehicula\n        imperdiet a ac nisl. Class aptent taciti sociosqu ad litora torquent per\n        conubia nostra, per inceptos himenaeos. Vivamus aliquam mi ac eleifend\n        faucibus. Curabitur erat enim, ultricies id nisi sed, maximus rhoncus\n        nibh. Ut eget rhoncus ante. Cras eu porttitor sem, at elementum sapien.\n        Vivamus mattis velit eu enim pellentesque sagittis. Donec iaculis\n        malesuada enim in rutrum. Nunc tincidunt rutrum porta. Nam vitae mi\n        pharetra, vehicula eros sit amet, elementum mauris.\n      </p>\n\n      <p>\n        Mauris placerat vestibulum massa, scelerisque porta dui vulputate ac.\n        Praesent lobortis aliquam nunc, vel molestie metus aliquam et. Etiam\n        convallis vel tortor vel suscipit. Morbi sem arcu, rutrum a imperdiet\n        sed, fringilla sed velit. Curabitur sed porttitor magna, non suscipit\n        quam. Morbi non odio tristique, auctor arcu et, viverra eros. Phasellus\n        a varius odio. Sed eu leo efficitur, consectetur justo in, aliquet arcu.\n        Ut rhoncus feugiat lectus, placerat dignissim neque pulvinar non.\n        Suspendisse vel facilisis odio. Phasellus viverra tempus ipsum, in\n        varius ex varius sed. Curabitur porttitor finibus turpis. Maecenas felis\n        leo, elementum vitae erat ut, egestas dapibus mauris.\n      </p>\n    </Container>\n  );\n};\n\nexport default Lorem;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Table,\n  Container,\n  Row,\n  Col,\n  Button,\n  Modal,\n  Form,\n} from 'react-bootstrap';\nimport { IUser, IState } from '../../interfaces';\nimport { updeteUserPoint } from '../../redux/user/actions';\nimport InterviewTasks from '../../static/interviewTasks.json';\n\ninterface IProps {\n  updeteUserPointFunc: (userId: number, point: number) => void;\n  users: Array<IUser>;\n}\n\nconst Interviewer = ({ updeteUserPointFunc, users }: IProps) => {\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [selectedTaskIds, setSelectedTaskIds] = useState<Array<number>>([]);\n  const [showCheckListModal, setShowCheckListModal] = useState<boolean>(false);\n\n  // close Taks modal\n  const handleCloseCheckListModal = () => {\n    setShowCheckListModal(false);\n\n    // clear selected taks ids\n    setSelectedTaskIds([]);\n  };\n\n  // open tasks modal\n  const handleShowCheckListModal = (userId: number) => {\n    setSelectedUserId(userId);\n    setShowCheckListModal(true);\n  };\n\n  // calculate and update interviwer Point\n  const updateInterviwerPoint = () => {\n    const points = calculatePointByTaskId(selectedTaskIds);\n\n    // update user points from redux\n    updeteUserPointFunc(selectedUserId, points);\n    handleCloseCheckListModal();\n  };\n\n  // calulate complated taks point by taskIds\n  const calculatePointByTaskId = (taskIds: Array<number>) => {\n    return InterviewTasks.reduce(function (prev, cur) {\n      return taskIds.includes(cur.id) ? prev + cur.point : prev;\n    }, 0);\n  };\n\n  // when check or uncheked tasks in modal, add or remove task id in state\n  const taskHandleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const taskId = parseInt( event.target.value );\n\n    event.target.checked === true\n      ? addTaskIdFromSelectedTaskIds(taskId)\n      : removeTaskIdFromSelectedTaskIds(taskId);\n  };\n\n  // add task id\n  const addTaskIdFromSelectedTaskIds = (taskId: number) => {\n    setSelectedTaskIds([...selectedTaskIds, taskId]);\n  };\n\n  // delete task id\n  const removeTaskIdFromSelectedTaskIds = (taskId: number) => {\n    setSelectedTaskIds(selectedTaskIds.filter((id) => id !== taskId));\n  };\n\n  return (\n    <>\n      <Container\n        className=\"justify-content-md-center\"\n        style={{ marginTop: '3%' }}\n      >\n        <Row>\n          <Col style={{ display: 'flex', justifyContent: 'center' }}>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>First Name</th>\n                  <th>Last Name</th>\n                  <th>Point</th>\n                  <th />\n                </tr>\n              </thead>\n              <tbody>\n                {users.map((user) => (\n                  <tr key={user.id}>\n                    <td>{user.id}</td>\n                    <td>{user.name}</td>\n                    <td>{user.lastname}</td>\n                    <td>{user.point}</td>\n                    <td>\n                      <Button\n                        variant=\"primary\"\n                        onClick={() => handleShowCheckListModal(user.id)}\n                      >\n                        Calculate\n                      </Button>{' '}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n      </Container>\n      <Modal\n        size=\"lg\"\n        show={showCheckListModal}\n        onHide={handleCloseCheckListModal}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Calculate Interwiver's Tasks Points</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th />\n                <th>Text</th>\n                <th>Point</th>\n              </tr>\n            </thead>\n            <tbody>\n              {InterviewTasks.map((task) => (\n                <tr>\n                  <td>\n                    <Form.Check\n                      type=\"checkbox\"\n                      value={task.id}\n                      onChange={taskHandleChange}\n                    />\n                  </td>\n                  <td>{task.text}</td>\n                  <td>{task.point}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseCheckListModal}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={updateInterviwerPoint}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: IState) => ({\n  users: state.users,\n});\n\nconst mapDispatchToProps = {\n  updeteUserPointFunc: updeteUserPoint,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)( Interviewer );\n","import * as constants from './types';\n\nexport interface IUpdateUserPoint {\n  type: constants.UPDATE_USER_POINT;\n  userId: number;\n  point: number;\n}\n\nexport const updeteUserPoint = (userId: number, point: number) => ({\n  type: constants.UPDATE_USER_POINT,\n  userId,\n  point,\n});\n","export const UPDATE_USER_POINT = 'UPDATE_USER_POINT';\nexport type UPDATE_USER_POINT = typeof UPDATE_USER_POINT;\n","import Interviewer from './Interviewer';\nexport default Interviewer;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { checkAuthentication } from './redux/auth/actions';\nimport { IState } from './interfaces';\nimport NavBar from './components/Navbar';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Lorem from './pages/Lorem';\nimport Interviewer from './pages/Interviewer';\n\ninterface IProps {\n  checkAuthenticationConnect: () => void;\n  isAuthenticated: boolean | null;\n}\n\nfunction App({ checkAuthenticationConnect, isAuthenticated }: IProps) {\n  React.useEffect(() => {\n    checkAuthenticationConnect();\n  });\n\n  return (\n    <Router>\n      {isAuthenticated && <NavBar />}\n      <Switch>\n        {!isAuthenticated ? (\n          <>\n            <Route path=\"/login\" component={ Login } />\n            <Redirect to=\"/login\" />\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\" component={ Home } />\n            <Route path=\"/interviwers\" component={ Interviewer } />\n            <Route path=\"/lorem\" component={ Lorem } />\n            <Redirect to=\"/\" />\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n}\n\nconst mapStateToProps = (state: IState) => ({\n  isAuthenticated: state.userAuthData.isAuthenticated,\n});\n\nconst mapDispatchToProps = {\n  checkAuthenticationConnect: checkAuthentication,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { applyMiddleware, compose, createStore, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk-recursion-detect';\nimport { authReducer } from '../auth/reducers';\nimport { userReducer } from '../user/reducers';\nimport { IState } from '../../interfaces';\n\nconst reduces = combineReducers({\n  userAuthData: authReducer,\n  users: userReducer,\n});\n\nlet composeEnhancers;\n\nif (\n  process.env.NODE_ENV !== 'production' &&\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n) {\n  composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n} else {\n  composeEnhancers = compose;\n}\n\nexport const store = createStore<IState, any, any, any>(\n  reduces,\n  undefined,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n);\n","import { IAuthenticate, IUnauthenticate } from './actions';\nimport { AUTHENTICATE, UNAUTHENTICATE } from './types';\nimport { IUserAuthData } from '../../interfaces';\n\nexport function authReducer(\n  state: IUserAuthData = { userName: null, uuid: null, isAuthenticated: false },\n  action: IAuthenticate | IUnauthenticate\n): IUserAuthData {\n  switch (action.type) {\n    case AUTHENTICATE:\n      return {\n        ...state,\n        userName: 'admin',\n        uuid: '38724YJKKKC0921I',\n        isAuthenticated: true,\n      };\n    case UNAUTHENTICATE:\n      return { userName: null, uuid: null, isAuthenticated: false };\n  }\n  return state;\n}\n","import { IUpdateUserPoint } from './actions';\nimport { UPDATE_USER_POINT } from './types';\nimport { IUser } from '../../interfaces';\nimport Users from '../../static/users.json';\n\nexport function userReducer(\n  state: Array<IUser> = Users,\n  action: IUpdateUserPoint\n): Array<IUser> {\n  switch (action.type) {\n    case UPDATE_USER_POINT: {\n      return state.map((user) =>\n        user.id === action.userId ? { ...user, point: action.point } : user\n      );\n    }\n    default:\n      return state;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}